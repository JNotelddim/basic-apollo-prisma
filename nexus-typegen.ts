/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  DeleteResult: { // root type
    success: boolean; // Boolean!
  }
  Mutation: {};
  Post: { // root type
    author: NexusGenRootTypes['User']; // User!
    content?: string | null; // String
    createdAt: string; // String!
    id: number; // Int!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt?: string | null; // String
  }
  Profile: { // root type
    bio?: string | null; // String
    id: number; // Int!
    user: NexusGenRootTypes['User']; // User!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: number; // Int!
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  DeleteResult: { // field return type
    success: boolean; // Boolean!
  }
  Mutation: { // field return type
    createPost: NexusGenRootTypes['Post']; // Post!
    deletePost: NexusGenRootTypes['DeleteResult']; // DeleteResult!
    updatePost: NexusGenRootTypes['Post']; // Post!
  }
  Post: { // field return type
    author: NexusGenRootTypes['User']; // User!
    content: string | null; // String
    createdAt: string; // String!
    id: number; // Int!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: string | null; // String
  }
  Profile: { // field return type
    bio: string | null; // String
    id: number; // Int!
    user: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    feed: NexusGenRootTypes['Post'][]; // [Post!]!
    post: NexusGenRootTypes['Post']; // Post!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  DeleteResult: { // field return type name
    success: 'Boolean'
  }
  Mutation: { // field return type name
    createPost: 'Post'
    deletePost: 'DeleteResult'
    updatePost: 'Post'
  }
  Post: { // field return type name
    author: 'User'
    content: 'String'
    createdAt: 'String'
    id: 'Int'
    published: 'Boolean'
    title: 'String'
    updatedAt: 'String'
  }
  Profile: { // field return type name
    bio: 'String'
    id: 'Int'
    user: 'User'
  }
  Query: { // field return type name
    feed: 'Post'
    post: 'Post'
    users: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      content: string; // String!
      title: string; // String!
    }
    deletePost: { // args
      id: number; // Int!
    }
    updatePost: { // args
      content?: string | null; // String
      id: number; // Int!
      published?: boolean | null; // Boolean
      title?: string | null; // String
    }
  }
  Query: {
    post: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}